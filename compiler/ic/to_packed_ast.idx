PackedConfig	ic/to_packed_ast.html#PackedConfig	to_packed_ast: PackedConfig	
PackedModule	ic/to_packed_ast.html#PackedModule	to_packed_ast: PackedModule	
PackedEncoder	ic/to_packed_ast.html#PackedEncoder	to_packed_ast: PackedEncoder	
rememberStartupConfig	ic/to_packed_ast.html#rememberStartupConfig,PackedConfig,ConfigRef	to_packed_ast: rememberStartupConfig(dest: var PackedConfig; config: ConfigRef)	
toFileIndex	ic/to_packed_ast.html#toFileIndex,LitId,PackedModule,ConfigRef	to_packed_ast: toFileIndex(x: LitId; m: PackedModule; config: ConfigRef): FileIndex	
initEncoder	ic/to_packed_ast.html#initEncoder,PackedEncoder,PackedModule,PSym,ConfigRef,PackedConfig	to_packed_ast: initEncoder(c: var PackedEncoder; m: var PackedModule; moduleSym: PSym;\n            config: ConfigRef; pc: PackedConfig)	
addIncludeFileDep	ic/to_packed_ast.html#addIncludeFileDep,PackedEncoder,PackedModule,FileIndex	to_packed_ast: addIncludeFileDep(c: var PackedEncoder; m: var PackedModule; f: FileIndex)	
addImportFileDep	ic/to_packed_ast.html#addImportFileDep,PackedEncoder,PackedModule,FileIndex	to_packed_ast: addImportFileDep(c: var PackedEncoder; m: var PackedModule; f: FileIndex)	
addExported	ic/to_packed_ast.html#addExported,PackedEncoder,PackedModule,PSym	to_packed_ast: addExported(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addConverter	ic/to_packed_ast.html#addConverter,PackedEncoder,PackedModule,PSym	to_packed_ast: addConverter(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addTrmacro	ic/to_packed_ast.html#addTrmacro,PackedEncoder,PackedModule,PSym	to_packed_ast: addTrmacro(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addPureEnum	ic/to_packed_ast.html#addPureEnum,PackedEncoder,PackedModule,PSym	to_packed_ast: addPureEnum(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addMethod	ic/to_packed_ast.html#addMethod,PackedEncoder,PackedModule,PSym	to_packed_ast: addMethod(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addReexport	ic/to_packed_ast.html#addReexport,PackedEncoder,PackedModule,PSym	to_packed_ast: addReexport(c: var PackedEncoder; m: var PackedModule; s: PSym)	
addCompilerProc	ic/to_packed_ast.html#addCompilerProc,PackedEncoder,PackedModule,PSym	to_packed_ast: addCompilerProc(c: var PackedEncoder; m: var PackedModule; s: PSym)	
storeSym	ic/to_packed_ast.html#storeSym,PSym,PackedEncoder,PackedModule	to_packed_ast: storeSym(s: PSym; c: var PackedEncoder; m: var PackedModule): PackedItemId	
toPackedNode	ic/to_packed_ast.html#toPackedNode,PNode,PackedTree,PackedEncoder,PackedModule	to_packed_ast: toPackedNode(n: PNode; ir: var PackedTree; c: var PackedEncoder;\n             m: var PackedModule)	
addPragmaComputation	ic/to_packed_ast.html#addPragmaComputation,PackedEncoder,PackedModule,PNode	to_packed_ast: addPragmaComputation(c: var PackedEncoder; m: var PackedModule; n: PNode)	
toPackedNodeTopLevel	ic/to_packed_ast.html#toPackedNodeTopLevel,PNode,PackedEncoder,PackedModule	to_packed_ast: toPackedNodeTopLevel(n: PNode; encoder: var PackedEncoder; m: var PackedModule)	
storePrim	ic/to_packed_ast.html#storePrim,RodFile,PackedType	to_packed_ast: storePrim(f: var RodFile; x: PackedType)	
loadPrim	ic/to_packed_ast.html#loadPrim,RodFile,PackedType	to_packed_ast: loadPrim(f: var RodFile; x: var PackedType)	
loadRodFile	ic/to_packed_ast.html#loadRodFile,AbsoluteFile,PackedModule,ConfigRef	to_packed_ast: loadRodFile(filename: AbsoluteFile; m: var PackedModule; config: ConfigRef): RodFileError	
saveRodFile	ic/to_packed_ast.html#saveRodFile,AbsoluteFile,PackedEncoder,PackedModule	to_packed_ast: saveRodFile(filename: AbsoluteFile; encoder: var PackedEncoder;\n            m: var PackedModule)	
PackedDecoder	ic/to_packed_ast.html#PackedDecoder	to_packed_ast: PackedDecoder	
undefined	ic/to_packed_ast.html#undefined	ModuleStatus.undefined	
storing	ic/to_packed_ast.html#storing	ModuleStatus.storing	
loading	ic/to_packed_ast.html#loading	ModuleStatus.loading	
loaded	ic/to_packed_ast.html#loaded	ModuleStatus.loaded	
outdated	ic/to_packed_ast.html#outdated	ModuleStatus.outdated	
ModuleStatus	ic/to_packed_ast.html#ModuleStatus	to_packed_ast: ModuleStatus	
LoadedModule	ic/to_packed_ast.html#LoadedModule	to_packed_ast: LoadedModule	
PackedModuleGraph	ic/to_packed_ast.html#PackedModuleGraph	to_packed_ast: PackedModuleGraph	
toFileIndexCached	ic/to_packed_ast.html#toFileIndexCached,PackedDecoder,PackedModuleGraph,int,LitId	to_packed_ast: toFileIndexCached(c: var PackedDecoder; g: PackedModuleGraph; thisModule: int;\n                  f: LitId): FileIndex	
loadNodes	ic/to_packed_ast.html#loadNodes,PackedDecoder,PackedModuleGraph,int,PackedTree,NodePos	to_packed_ast: loadNodes(c: var PackedDecoder; g: var PackedModuleGraph; thisModule: int;\n          tree: PackedTree; n: NodePos): PNode	
initPackedDecoder	ic/to_packed_ast.html#initPackedDecoder,ConfigRef,IdentCache	to_packed_ast: initPackedDecoder(config: ConfigRef; cache: IdentCache): PackedDecoder	
moduleIndex	ic/to_packed_ast.html#moduleIndex,PackedDecoder,PackedModuleGraph,int,PackedItemId	to_packed_ast: moduleIndex(c: var PackedDecoder; g: var PackedModuleGraph; thisModule: int;\n            s: PackedItemId): int32	
moduleFromRodFile	ic/to_packed_ast.html#moduleFromRodFile,PackedModuleGraph,ConfigRef,IdentCache,FileIndex	to_packed_ast: moduleFromRodFile(g: var PackedModuleGraph; conf: ConfigRef; cache: IdentCache;\n                  fileIdx: FileIndex): PSym	
loadProcBody	ic/to_packed_ast.html#loadProcBody,ConfigRef,IdentCache,PackedModuleGraph,PSym	to_packed_ast: loadProcBody(config: ConfigRef; cache: IdentCache; g: var PackedModuleGraph;\n             s: PSym): PNode	
simulateLoadedModule	ic/to_packed_ast.html#simulateLoadedModule,PackedModuleGraph,ConfigRef,IdentCache,PSym,PackedModule	to_packed_ast: simulateLoadedModule(g: var PackedModuleGraph; conf: ConfigRef;\n                     cache: IdentCache; moduleSym: PSym; m: PackedModule)	
RodIter	ic/to_packed_ast.html#RodIter	to_packed_ast: RodIter	
initRodIter	ic/to_packed_ast.html#initRodIter,RodIter,ConfigRef,IdentCache,PackedModuleGraph,FileIndex,PIdent	to_packed_ast: initRodIter(it: var RodIter; config: ConfigRef; cache: IdentCache;\n            g: var PackedModuleGraph; module: FileIndex; name: PIdent): PSym	
initRodIterAllSyms	ic/to_packed_ast.html#initRodIterAllSyms,RodIter,ConfigRef,IdentCache,PackedModuleGraph,FileIndex	to_packed_ast: initRodIterAllSyms(it: var RodIter; config: ConfigRef; cache: IdentCache;\n                   g: var PackedModuleGraph; module: FileIndex): PSym	
nextRodIter	ic/to_packed_ast.html#nextRodIter,RodIter,PackedModuleGraph	to_packed_ast: nextRodIter(it: var RodIter; g: var PackedModuleGraph): PSym	
interfaceSymbols	ic/to_packed_ast.html#interfaceSymbols.i,ConfigRef,IdentCache,PackedModuleGraph,FileIndex,PIdent	to_packed_ast: interfaceSymbols(config: ConfigRef; cache: IdentCache; g: var PackedModuleGraph;\n                 module: FileIndex; name: PIdent): PSym	
interfaceSymbol	ic/to_packed_ast.html#interfaceSymbol,ConfigRef,IdentCache,PackedModuleGraph,FileIndex,PIdent	to_packed_ast: interfaceSymbol(config: ConfigRef; cache: IdentCache; g: var PackedModuleGraph;\n                module: FileIndex; name: PIdent): PSym	
idgenFromLoadedModule	ic/to_packed_ast.html#idgenFromLoadedModule,LoadedModule	to_packed_ast: idgenFromLoadedModule(m: LoadedModule): IdGenerator	
rodViewer	ic/to_packed_ast.html#rodViewer,AbsoluteFile,ConfigRef,IdentCache	to_packed_ast: rodViewer(rodfile: AbsoluteFile; config: ConfigRef; cache: IdentCache)	
